<template name="simple-stepper">
  <view class="page">
    <a-nav-bar title="simple-stepper" left-arrow/>
    <scroll-view style="flex: 1;" scroll-y>

      <view class="simple">
        <text class="simple-title">基础用法</text>
        <text class="simple-desc">
          通过 $value 绑定输入值，可以通过 change 事件监听到输入值的变化。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[0]" onChange="onChange1"/>
          <text class="simple-title">{{ value[0] }}</text>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title" @click="setStep">设置步长</text>
        <text class="simple-desc">
          通过 step 属性设置每次点击增加或减少按钮时变化的值，默认为 1。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[1]" :step="step"/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">输入范围</text>
        <text class="simple-desc">
          通过 min 和 max 属性限制输入值的范围。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[2]" min="5" max="8"/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">限制输入整数</text>
        <text class="simple-desc">
          设置 integer 属性后，输入框将限制只能输入整数。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[3]" integer/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">禁用状态</text>
        <text class="simple-desc">
          通过设置 disabled 属性来禁用步进器，禁用状态下无法点击按钮或修改输入框。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[4]" disabled/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">禁用输入框</text>
        <text class="simple-desc">
          通过设置 disable-input 属性来禁用输入框，此时按钮仍然可以点击。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[5]" disable-input/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">固定小数位数</text>
        <text class="simple-desc">
          通过设置 decimal-length 属性可以保留固定的小数位数。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[6]" step="0.2" :decimal-length="2"/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">自定义大小</text>
        <text class="simple-desc">
          通过 input-width 属性设置输入框宽度，通过 button-size 属性设置按钮大小和输入框高度。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[7]" input-width="40" button-size="32"/>
        </view>
      </view>


      <view class="simple">
        <text class="simple-title">圆角风格</text>
        <text class="simple-desc">
          将 theme 设置为 round 来展示圆角风格的步进器。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[7]" theme="round" button-size="22" disable-input/>
        </view>
      </view>

      <view class="simple">
        <text class="simple-title">异步变更</text>
        <text class="simple-desc">
          通过 before-change 属性可以接管变更过程和结果状态。
        </text>

        <view class="simple-box">
          <a-stepper $value="value[8]" :before-change="this.beforeChange"/>
        </view>
      </view>


      <safe-area></safe-area>

    </scroll-view>
  </view>
</template>

<script>
import ANavBar from "../../components/act/a-nav-bar";
import AStepper from "../../components/act/a-stepper";
import {Toast} from "../../components/act";

export default {
  name: "simple-stepper",
  components: {AStepper, ANavBar},
  data() {
    return {
      value: Array.from({length: 10}).fill(2),
      step: 2
    }
  },
  methods: {
    onChange1(e) {
      Toast(`onChange:\n${JSON.stringify(e)}`)
    },
    setStep() {
      this.data.step = 7;
    },
    beforeChange(value) {
      Toast.loading({forbidClick: true, message: `正在提交 : ${value}`});
      return new Promise((resolve) => {
        setTimeout(() => {
          Toast.clear();
          // 在 resolve 函数中返回 true 或 false
          const result = Math.random() > 0.5;
          resolve(result);
          Toast(result ? '成功' : '失败')
        }, 1000);
      });
    }
  }
}
</script>

<style scoped>
.page {
  height: 100%;
  flex: 1;
  background-color: #F8F8F8;
}


.simple {
  padding-bottom: 28px;
}

.simple-title {
  margin: 16px;
  font-weight: 600;
  font-size: 18px;
}

.simple-desc {
  color: #999;
  font-size: 14px;
  margin: 0 16px 16px;
}


.todo {
  background: #f1e9d5;
}

.simple-box {
  justify-content: center;
  align-items: center;
  flex-flow: row;
}

</style>